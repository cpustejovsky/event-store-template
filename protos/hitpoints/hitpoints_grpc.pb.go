// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/hitpoints/hitpoints.proto

package hitpoints

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HitPointsRecorderClient is the client API for HitPointsRecorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HitPointsRecorderClient interface {
	RecordHitPoints(ctx context.Context, in *PlayerCharacterHitPoints, opts ...grpc.CallOption) (*empty.Empty, error)
}

type hitPointsRecorderClient struct {
	cc grpc.ClientConnInterface
}

func NewHitPointsRecorderClient(cc grpc.ClientConnInterface) HitPointsRecorderClient {
	return &hitPointsRecorderClient{cc}
}

func (c *hitPointsRecorderClient) RecordHitPoints(ctx context.Context, in *PlayerCharacterHitPoints, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/hitpoints.HitPointsRecorder/RecordHitPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HitPointsRecorderServer is the server API for HitPointsRecorder service.
// All implementations must embed UnimplementedHitPointsRecorderServer
// for forward compatibility
type HitPointsRecorderServer interface {
	RecordHitPoints(context.Context, *PlayerCharacterHitPoints) (*empty.Empty, error)
	mustEmbedUnimplementedHitPointsRecorderServer()
}

// UnimplementedHitPointsRecorderServer must be embedded to have forward compatible implementations.
type UnimplementedHitPointsRecorderServer struct {
}

func (UnimplementedHitPointsRecorderServer) RecordHitPoints(context.Context, *PlayerCharacterHitPoints) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordHitPoints not implemented")
}
func (UnimplementedHitPointsRecorderServer) mustEmbedUnimplementedHitPointsRecorderServer() {}

// UnsafeHitPointsRecorderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HitPointsRecorderServer will
// result in compilation errors.
type UnsafeHitPointsRecorderServer interface {
	mustEmbedUnimplementedHitPointsRecorderServer()
}

func RegisterHitPointsRecorderServer(s grpc.ServiceRegistrar, srv HitPointsRecorderServer) {
	s.RegisterService(&HitPointsRecorder_ServiceDesc, srv)
}

func _HitPointsRecorder_RecordHitPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerCharacterHitPoints)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HitPointsRecorderServer).RecordHitPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hitpoints.HitPointsRecorder/RecordHitPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HitPointsRecorderServer).RecordHitPoints(ctx, req.(*PlayerCharacterHitPoints))
	}
	return interceptor(ctx, in, info, handler)
}

// HitPointsRecorder_ServiceDesc is the grpc.ServiceDesc for HitPointsRecorder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HitPointsRecorder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hitpoints.HitPointsRecorder",
	HandlerType: (*HitPointsRecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordHitPoints",
			Handler:    _HitPointsRecorder_RecordHitPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/hitpoints/hitpoints.proto",
}
